#Answer 1
# Student information stored in a dictionary
students = {
    "Ahmet Yilmaz": [85, 90, 78],
    "Mehmet Demir": [92, 88, 76],
    "Ayse Kaya": [85, 90, 95],
    "Yusuf Sert": [55, 85, 72],
    "Eymen Sahin": [62, 80, 75],
    "Omer Yildiz": [65, 91, 92],
    "Kerem Yildirim": [82, 87, 76],
    "Hamza Ozturk": [42, 55, 67],
    "Ahmet Aydin": [65, 68, 71],
    "Ali Ozdemir": [70, 80, 90]
}

#1 Calculating each student's GPA and adding it to the dictionary
for student, grades in students.items():
    gpa = sum(grades) / len(grades)
    students[student].append(round(gpa,2))

#2 Finding and printing the information of the student with the highest GPA
highest_gpa_student = max(students.items(), key=lambda x: x[1][-1])
print("Student with the highest GPA:")
print("Name:", highest_gpa_student[0])
print("Grades:", highest_gpa_student[1][:-1])  # Exclude GPA from grades
print("GPA:", highest_gpa_student[1][-1])

#3 Separating each student's name from their surname and storing them in a separate tuple and adding them to a list
names_surnames = [student.split() for student in students]

#4 Sorting the names in alphabetical order and printing the sorted list
names_surnames.sort()
print("\nNames sorted in alphabetical order:")
for name, surname in names_surnames:
    print(name, surname)

#5 Keeping and printing the students with a GPA below 70 in a set
gpa_below_70_students = {student for student, grades in students.items() if grades[-1] < 70}
print("\nStudents with a GPA below 70:")
for student in gpa_below_70_students:
    print(student)

#Answer 2
class MovieCollection:
    def __init__(self):
        # Initializes the MovieCollection object with an empty dictionary to store movies
        # Calls the load_movies method to load movies from a file into the dictionary
        self.movies = {}
        self.load_movies()

    def load_movies(self):
        # Loads movies from a file named 'movies.txt' and populates the movies dictionary with them
        try:
            with open('movies.txt', 'r') as f:
                for line in f:
                    # Parses each line of the file and adds movie details to the dictionary
                    name, director, release_year, genre = line.strip().split(',')
                    self.movies[name] = {'director': director, 'release_year': int(release_year), 'genre': genre}
        except FileNotFoundError:
            # Handles the case where the file doesn't exist (first run or empty file)
            pass

    def save_movies(self):
        # Saves movies from the dictionary back to the 'movies.txt' file
        with open('movies.txt', 'w') as f:
            for name, details in self.movies.items():
                # Writes movie details in CSV format to the file
                f.write(f"{name},{details['director']},{details['release_year']},{details['genre']}\n")

    def modify_movie(self, name, director, release_year, genre):
        # Modifies or adds a movie to the collection
        self.movies[name] = {'director': director, 'release_year': release_year, 'genre': genre}
        # Saves the updated collection to the file
        self.save_movies()

    def delete_movie(self, name):
        # Deletes a movie from the collection
        if name in self.movies:
            del self.movies[name]
            # Saves the updated collection to the file
            self.save_movies()

    def list_all_movies(self):
        # Returns a generator of all movies in the collection
        return self.movies.items()

def main():
    # Creates an instance of the MovieCollection class
    collection = MovieCollection()

    # Main loop for user interaction
    while True:
        print("\nMenu:")
        print("1. Add Movie")
        print("2. Edit Movie")
        print("3. Delete Movie")
        print("4. View Collection")
        print("5. Exit")

        # User input for menu choice
        choice = input("Enter your choice: ")

        if choice == '1':
            # Adds a new movie to the collection
            name, director, release_year, genre = input("Name: "), input("Director: "), int(input("Year: ")), input("Genre: ")
            collection.modify_movie(name, director, release_year, genre)
            print("Added!")
        elif choice == '2':
            # Edits an existing movie in the collection
            name = input("Name to edit: ")
            if name in collection.movies:
                director, release_year, genre = input("New director: "), int(input("New release year: ")), input("New genre: ")
                collection.modify_movie(name, director, release_year, genre)
                print("Edited!")
            else:
                print("Not found!")
        elif choice == '3':
            # Deletes a movie from the collection
            name = input("What to delete: ")
            if name in collection.movies:
                collection.delete_movie(name)
                print("Deleted!")
            else:
                print("Not found!")
        elif choice == '4':
            # Displays all movies in the collection
            print("\nMovie Collection:")
            for name, details in collection.list_all_movies():
                print(f" Name: {name} | Director: {details['director']} | Release Year: {details['release_year']} | Genre: {details['genre']}")
        elif choice == '5':
            # Exits the program
            print("Exiting...")
            break
        else:
            print("Invalid choice")

if __name__ == "__main__":
    # Executes the main function if the script is run directly
    main()

#Answer 3
customers={}


def customer_registration():
   c_name=input("Please enter your name and surname:")
   c_email=input("Please enter your e-mail address:")
   c_phone_number=input("Please enter your phone number:")
   c_info={
       "Name Surname":c_name,
       "Email":c_email,
       "Phone Number":c_phone_number
   }
   numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
   import random
   c_id= ''.join([random.choice(numbers) for i in range(4)])
   customers[c_id]=c_info
   print(customers)
   print("Customer is successfully registered")





def customer_info_update():
   id=input("Please enter the customer id: ")
   print(f"Existing information about customer with id number {id}:", customers.get(id))
   if id in customers:
       print("1. Name Surname")
       print("2. Email Address")
       print("3. Phone Number")
       print("Which customer information do you want to change?")
       which_info = input("Enter one of the numbers above: ")
       if which_info == "1":
           new_name = input("New Name Surname: ")
           customers[id]["Name Surname"] = new_name
       elif which_info == "2":
           new_mail = input("New Email: ")
           customers[id]["Email"] = new_mail
       elif which_info == "3":
           new_phone = input("New Phone Number: ")
           customers[id]["Phone Number"] = new_phone
       print(f"New information about customer with id number {id}:", customers.items(id))
       print(" Customer informations are successfully updated")



def customer_del():
   c_del=input("Please enter the customer id to delete: ")
   if c_del in customers:
       customers.pop(c_del)
       print(" Customer is successfully deleted")




def customer_info_list():
   if not customers:
       print("No customer information available.")

   else:
       print("All customers' informations:")
       for keys,values in customers.items():
           print("Customer ID:", keys)
           print("Other informations:", values)   




def main_menu():
   while True:
       print("\nMain Menu:")
       print("1. Register a new customer ")
       print("2. Update the information of a customer")
       print("3. Delete a customer")
       print("4. List the information of all customers")
       print("5. Exit")


       menu_choice = input("Enter one of the number above: ")


       if menu_choice == "1":
           customer_registration()
       elif menu_choice == "2":
Comment
 
Leave a comment
 
           customer_info_update()
       elif menu_choice == "3":
           customer_del()
       elif menu_choice == "4":
           customer_info_list()
       elif menu_choice == "5":
           print("Exit program...")
           break       
main_menu()
